# Nullplatform Setup Configuration
#
# This configuration file defines applications and their nested resources.
# Each application contains its own scopes and parameters.
#
# Prerequisites:
# - Namespace must already exist (create with: np namespace create --body '{"name":"my-namespace"}')
# - Get namespace name with: np namespace list --format json

# Applications
# Each application can contain nested scopes and parameters
applications:
  # Example 1: Simple application with scopes only
  - name: "my-web-app"
    namespace: "my-namespace"  # Reference existing namespace by name

    scopes:
      - name: "development"
      - name: "staging"
      - name: "production"

  # Example 2: Application with repository and parameters
  - name: "my-api-service"
    namespace: "my-namespace"
    repository:
      url: "https://github.com/my-org/my-api-service"

    scopes:
      - name: "development"
      - name: "production"

    parameters:
      - name: "DATABASE_URL"
        value: "postgres://localhost:5432/mydb"

      - name: "API_KEY"
        value: "sk-xxxxx"
        # secret: true  # Mark as secret if sensitive

      - name: "LOG_LEVEL"
        value: "info"

  # Example 3: Application with scope-specific parameters
  - name: "full-stack-app"
    namespace: "my-namespace"
    repository:
      url: "https://github.com/my-org/full-stack-app"
    # description: "Full stack application"  # Optional fields supported

    scopes:
      - name: "development"
      - name: "staging"
      - name: "production"

    parameters:
      # Scope-specific parameters (different values per environment)
      - name: "API_BASE_URL"
        scope: "development"  # Reference scope by name
        value: "https://api-dev.example.com"

      - name: "API_BASE_URL"
        scope: "staging"
        value: "https://api-staging.example.com"

      - name: "API_BASE_URL"
        scope: "production"
        value: "https://api.example.com"

      # Application-level parameters (no scope = applies to all environments)
      - name: "FEATURE_FLAGS"
        value: "new-ui,analytics,dark-mode"

      - name: "MAX_UPLOAD_SIZE"
        value: "10485760"  # 10MB in bytes

# How It Works:
# 1. Script resolves namespace name to ID automatically
# 2. Creates each application in the specified namespace
# 3. Creates all scopes for that application (using application ID)
# 4. Creates all parameters for that application (using application ID)
# 5. Scope references in parameters are resolved automatically within the same app
#
# Everything is created in one run - no manual ID copying required!
#
# Usage:
#   python nullplatform-setup.py --config nullplatform-setup.yaml
#   python nullplatform-setup.py --config nullplatform-setup.yaml --dry-run  # Preview first
#   python nullplatform-setup.py --config nullplatform-setup.yaml --verbose  # Debug info
